[
  
  {
    "title": "0-Click ATO and Privilege Escalation",
    "url": "/posts/0-Click-ATO-and-privilege-escalation/",
    "categories": "Web Penetration testing",
    "tags": "Web Pentest",
    "date": "2025-08-13 00:00:00 +0300",
    





    
    "snippet": "WhoamiDescription:Account Takeover (ATO) is a critical security vulnerability that allows an attacker to gain unauthorized access to a legitimate user’s account. This can occur through various atta...",
    "content": "WhoamiDescription:Account Takeover (ATO) is a critical security vulnerability that allows an attacker to gain unauthorized access to a legitimate user’s account. This can occur through various attack vectors, such as weak authentication mechanisms, credential stuffing, password reset flaws, insecure direct object references (IDOR), or session hijacking. Once access is gained, an attacker can perform actions on behalf of the legitimate user, leading to severe consequences such as unauthorized transactions, data theft, privilege escalation, or lateral movement within the application.POC:      After discovering some interesting directories using directory brute-forcing and other techniques, I was able to find a path that contains all registered users in the application. (e.g., https://xyz.com/api/v1/users)            I tried to open any user here to examine what parameters the user has.            Now, from Burp Suite, I sent the request to the Repeater and tried to identify the allowed methods by changing the method from GET to OPTIONS.        Great! I now have all the allowed methods. Let’s try adding a new user.        Using curl from my Kali machine, I attempted to add a new user (e.g., username=pentest_user).        The response indicates that the user has been created successfully.        Let’s validate this by checking the /api/v1/users endpoint.        As seen, the user has been added successfully.  Privilege EscalationI had previously discovered that the PATCH method was allowed, which might enable me to change the password of any current user. This could lead to an ATO, or I could alter the permissionId parameter to gain higher privileges.I decided to check the administrator’s ID page that I had found earlier and noticed that their permissionId was 1.Now, what if I use the PATCH method to change the permissionId of the user I created earlier from null to 1 to match the admin’s permission ID?Let’s try it!And yes, we received a response indicating that the permission has been updated.Let’s validate this by checking the endpoint again.Now, i can use this user and login with admin privilage.Conclusion:In this demonstration, we successfully carried out an Account Takeover (ATO) and Privilege Escalation attack on the application, highlighting critical security flaws. By exploiting weak method access controls and improper privilege management, we were able to create a new user, change the permissions, and escalate privileges to that of an administrator.This showcases the importance of securing API endpoints, properly validating user permissions, and ensuring that only authorized actions are permitted. It is crucial for developers to implement proper authentication mechanisms, enforce strict access controls, and regularly audit their applications for potential security weaknesses.Addressing these vulnerabilities will significantly improve the security posture of any web application, preventing unauthorized access and potential privilege escalation attacks."
  },
  
  {
    "title": "Spoofing Any Internal Email",
    "url": "/posts/Spoofing-Any-Internal-Email/",
    "categories": "Network Penetration testing",
    "tags": "Network Pentest",
    "date": "2025-06-19 00:00:00 +0300",
    





    
    "snippet": "WhoamiIntroduction:During a recent security assessment, I uncovered a critical vulnerability in an SMTP server that allowed anyone to send emails without authentication. This anonymous login vulner...",
    "content": "WhoamiIntroduction:During a recent security assessment, I uncovered a critical vulnerability in an SMTP server that allowed anyone to send emails without authentication. This anonymous login vulnerability could enable attackers to send spoofed emails, potentially leading to phishing, malware distribution, or data breaches. In this report, I’ll walk you through the discovery, demonstrate how it can be exploited, discuss its impact, and provide actionable recommendations to secure your email infrastructure.Discovering the VulnerabilityWhile conducting a routine network scan using Nmap, I noticed port 25 was open, indicating an SMTP server. The service version wasn’t identified, which piqued my curiosity. To investigate further, I connected to the server using Telnet, and was shocked when the server greeted me with a “220 Service ready” message and allowed me to proceed without requiring credentials. This was a red flag, suggesting the server was misconfigured to permit anonymous access, a vulnerability that could be easily exploited.Understanding Anonymous Login VulnerabilitiesAn anonymous login vulnerability occurs when a system or service, such as an SMTP server, allows users to authenticate without valid credentials. In the context of email, this means anyone can connect to the server and send emails, specifying any sender address without verification. This misconfiguration is often found in FTP servers, SMB shares, and email servers, but it’s particularly dangerous in SMTP due to email’s critical role in communication. Attackers can exploit this flaw to:• Gain unauthorized access to send emails.• Enumerate users or system configurations.• Upload malicious files or exfiltrate sensitive data via email.Dealing with SMTPLet’s walk through the steps of how to interact with an SMTP server using Telnet.1) Initiate Telnet Connection:To start, connect to the SMTP server using the following command:telnet &lt;SMTP_SERVER&gt; 252) Server Response:The SMTP server responds with a greeting message:220 &lt;SMTP_SERVER&gt; Service ready.3) MAIL FROM Command:The client specifies the sender’s email address using the MAIL FROM command:MAIL FROM:&lt;sender_email&gt;The server responds with:250 OK4) RCPT TO Command:The client specifies the recipient’s email address using the RCPT TO command:RCPT TO:&lt;recipient_email&gt;The server responds with:250 OK5) DATA Command:The client issues the DATA command to start the email content:DATAThe server responds with:354 Enter mail body, End mail with a '.' in column 1 on a line by itself.6) Email Content:The client types the email’s subject and body. In this case, the subject is “POC” and the body is:Subject: POCand press enter to new line then write the body of the message. In this case, the subject is  this is a POC from the SMTP Server7) End of Data:The client ends the email body by entering a period (.) on a new line:.8) QUIT Command:QUITPOCTo confirm the vulnerability, I tested the SMTP server by sending an email using Telnet. Below is the step-by-step process I followed, which illustrates how easily an attacker could exploit this flaw:1) Let’s connect to the SMTP service and try to send an email2) Let’s see if the email was sent.As we can see, the email was sent, and we were able to spoof internal emails.Recommendation•\tDisable Anonymous Authentication:            o\tEnsure authentication is required for all services.            o\tRestrict anonymous access on SMTP.•\tImplement Strong Authentication:     o\tUse strong, unique passwords for all accounts.     o\tEnforce multi-factor authentication (MFA) where possible."
  },
  
  {
    "title": "Multiple ATO",
    "url": "/posts/Multiple_ATO/",
    "categories": "Web Application Penetration testing",
    "tags": "Web Pentest",
    "date": "2025-05-11 00:00:00 +0300",
    





    
    "snippet": "First ATODescription:Account Takeover (ATO) is a critical security vulnerability that allows an attacker to gain unauthorized access to a legitimate user’s account. This can occur through various a...",
    "content": "First ATODescription:Account Takeover (ATO) is a critical security vulnerability that allows an attacker to gain unauthorized access to a legitimate user’s account. This can occur through various attack vectors, such as weak authentication mechanisms, credential stuffing, password reset flaws, insecure direct object references (IDOR), or session hijacking. Once access is gained, an attacker can perform actions on behalf of the legitimate user, leading to severe consequences such as unauthorized transactions, data theft, privilege escalation, or lateral movement within the application.In this scenario, I found that I could take over another user’s account by manipulating the response and brute-forcing the verification code.POC:1- I tried to register using my email address that i have registered before,•\tApplication responds with “The Email has already been taken” error2- I intercepted the response (via Burp/Proxy) and replace the error message with {“status”: true,”status_code”:200,”message”:”user registered successfully”}” and replace the response code to HTTP/2 200 OK• And here’s the surprise: the server accepted the request (HTTP 200) and sent a 4-digit verification code to the victim’s email, which forwarded me to the next page.3- I tried to brute-forces the 4-digit code (10,000 possible combinations) using burp intruder and Successful verification leads to account takeover.Once I realized that the application had no server-side validation, I tried to perform another ATO using different functions.In the second scenario, we can reproduce a different situation in the ‘forgot password’ function by manipulating the response as well.1- Go to forget password and put email you want to change its password.2- Write any invalid OTP.   (BTW we can also brute force the OTP here as we did in registeration page )3- Intercept the response in Burp .4-You will get the following response4- Change the response code  to 200 ok and error message to “{“status”:true,”status_code”:200,”message”:”Account verified successfully”}” .5- send the response.And here we are, we can now change the victim’s password to new password.Third scenario , in the forget password function we can reproduce a different scenario•\tGo to forget password and put your email.•\tWrite the valid OTP from your email.•\tYou will be redirected to a page where you can enter the new password•\tWrite the new password and intercept the request in burp then send it to repeater and change your email with victim email then the victim password changed."
  },
  
  {
    "title": "Business Logic Leads To Full Discount",
    "url": "/posts/Business-Logic-Leads-To-Full-Discount/",
    "categories": "Web Application Penetration testing",
    "tags": "Web Pentest",
    "date": "2025-05-11 00:00:00 +0300",
    





    
    "snippet": "To be published ……",
    "content": "To be published ……"
  }
  
]

